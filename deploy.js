const { Web3 } = require('web3');

// Replace with your own Ethereum node URL (local, Infura, Alchemy, etc.)
const rpcEndpoint = 'http://127.0.0.1:8545/sSFLgFsmIpuuVoBnJoeskjZI/main'; // Local node or Infura endpoint

const web3 = new Web3(rpcEndpoint);
const abi = require('./solveabi.json');

const privateKey = '0x9c6f5a251dd2fdeff49f1be8158c08742ae5771f5dea173e6202cc551bac4c42';
const challAddress = '0xEc48e89b3bF7842Eaf39Cb413Ee7a7ccCA636db1';

const bytecode = '0x608060405234801561000f575f80fd5b50604051610a06380380610a0683398181016040528101906100319190610633565b3360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5746ec50ea289e343251be889880092f02d27e59eb35213e3c813e220201fe195f1b60025f600181526020019081526020015f20819055507f95dc8eaedc145086d06ed2befaaf59b299d1c6866a645c4dee75991e7ae058a75f1b60025f600281526020019081526020015f20819055507fce8b9002cb998efb3ea9470a07bae2055c43eea6b64a5d690068476e826dd0cb5f1b60025f600381526020019081526020015f20819055507fbd7e648f0002f280eaa5e90255b39d26ca6f6476c64e81839f2a3034e6e156b85f1b60025f600481526020019081526020015f20819055507ffc6a2a1bbefe4ea390b8cc8f3dcb6f0e596bdcf1e2297f104cc0d18cc8944e645f1b60025f600581526020019081526020015f20819055507f40826c15a412b3ae1b6655ac7f4ad0beee2ad1215f0b876cfad7727a36baf7225f1b60025f600681526020019081526020015f20819055507f989298a86050cd4856ceb6e7a5d8df1af16eab4ae05d9fb8f85f2a8af4ada27c5f1b60025f600781526020019081526020015f20819055507f29cccfd36da26ed65d6330b423cb15fdc06d6212ec73820da3350fae1da814ed5f1b60025f600881526020019081526020015f20819055507fa5ee69c10b6ce76a8701bece683ee694133d7790030194714262062d281a7c9a5f1b60025f600981526020019081526020015f20819055507f933c0210ebb305f6f42cac6562d320ccd6b89e8b83ba836c29e4f88ec40bf8bc5f1b60025f600a81526020019081526020015f20819055507f41f4ca51f78ddae2118e2a36921886b57b421efdc04a8acde9afce0c816170355f1b60025f600b81526020019081526020015f20819055507f5828ce927f94d5efb5746bc568026582389e200365f182d15945bfff511e7bdb5f1b60025f600c81526020019081526020015f20819055507ffa680b24e75279f88acff575755d45173e671b60b145de3c3206055be2c8d8fb5f1b60025f600d81526020019081526020015f20819055507f4f4500f5db9529d00632659081a26b89f6ec20738e495ec66085893f506a0c235f1b60025f600e81526020019081526020015f20819055507ffcfce016b5f81b3f55eb5e09a087f1962e2dbc4208134e6ea7a9d488b8ab66665f1b60025f600f81526020019081526020015f20819055507f5bc9d8181446e892dff82b9038d0cfa6ed9b289b57b32c41e26ddb7c0ea40da95f1b60025f601081526020019081526020015f20819055507fd42cece8c7b2c94539e7968d2109e42c7e8c09788d965955f3b717161107d03d5f1b60025f601181526020019081526020015f20819055507fb24ed635b1d07823c9732d393862c4302faab837eb9b4e598a8c35f39a81736b5f1b60025f601281526020019081526020015f20819055507fb56d77f35461e4d09fa44251ccd9091610e51821bbd2e72e98a6f4587de0676d5f1b60025f601381526020019081526020015f20819055507f8c4128cd4f8a00088b4b9aa1bcd6d5526d47c9d617f272ad16b354dd7f89c0b75f1b60025f601481526020019081526020015f20819055507f2aeb6726752eac5e4bd156129223ad396e8ac87ab17d0eadfd4d056fb4f3e9d35f1b60025f601581526020019081526020015f20819055507fe108b5618a9f639479bf713096a921f1fb31b2cf56bd3d57ccbba7147d86d25e5f1b60025f601681526020019081526020015f20819055507fcff74d6f4c577f8ab75daf3b94a647ac1b38a64cddc8fc3547e106052eccadd85f1b60025f601781526020019081526020015f20819055505061065e565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610602826105d9565b9050919050565b610612816105f8565b811461061c575f80fd5b50565b5f8151905061062d81610609565b92915050565b5f60208284031215610648576106476105d5565b5b5f6106558482850161061f565b91505092915050565b61039b8061066b5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80632b8786a7146100435780638da5cb5b146100615780639e5faafc1461007f575b5f80fd5b61004b610089565b60405161005891906102e2565b60405180910390f35b6100696100ac565b604051610076919061031b565b60405180910390f35b6100876100d1565b005b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ccac00076040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610135575f80fd5b505af1158015610147573d5f803e3d5ffd5b505050505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327d4563e60025f4381526020019081526020015f20546040518263ffffffff1660e01b81526004016101b4919061034c565b5f604051808303815f87803b1580156101cb575f80fd5b505af11580156101dd573d5f803e3d5ffd5b505050505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5be4428306040518263ffffffff1660e01b8152600401610239919061031b565b5f604051808303815f87803b158015610250575f80fd5b505af1158015610262573d5f803e3d5ffd5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f6102aa6102a56102a084610268565b610287565b610268565b9050919050565b5f6102bb82610290565b9050919050565b5f6102cc826102b1565b9050919050565b6102dc816102c2565b82525050565b5f6020820190506102f55f8301846102d3565b92915050565b5f61030582610268565b9050919050565b610315816102fb565b82525050565b5f60208201905061032e5f83018461030c565b92915050565b5f819050919050565b61034681610334565b82525050565b5f60208201905061035f5f83018461033d565b9291505056fea26469706673582212201bb9f66459bf58f313908a31a56dcf42285bebb3719f59ea21ff9c828a716cae64736f6c634300081a0033';

// Create the contract object
const contract = new web3.eth.Contract(abi);

// Create a new account from the private key
const account = web3.eth.accounts.privateKeyToAccount(privateKey);
web3.eth.accounts.wallet.add(account);
web3.eth.defaultAccount = account.address;

async function deployContract() {
    try {
        // Estimate gas for deployment
        const gasEstimate = await contract.deploy({ data: bytecode, arguments: [challAddress] }).estimateGas();

        // Build and sign the transaction
        const deployTransaction = contract.deploy({
            data: bytecode,
            arguments: [challAddress] // Pass constructor arguments here if needed
        });

        const deployedContract = await deployTransaction
            .send({
                from: account.address,
                gas: gasEstimate,
                gasPrice: await web3.eth.getGasPrice()
            })
            .once("transactionHash", (txhash) => {
                console.log(`Mining deployment transaction ...`);
                console.log('Hash:', txhash);
            });
        console.log(`Contract deployed at ${deployedContract.options.address}`);
    } catch (error) {
        console.error('Error deploying contract:', error);
    }
}

deployContract();
